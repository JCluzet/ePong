Request Backend (API): 

Address_backend = http://localhost:5001/

interface: 

  Authentification:

    - login_success = { login: string, userCreate: boolean, twofa: boolean, apiToken: string, exDate: Date }
    - refresh_token = { token: string, exDate: Date };

  Users:

    - User_entity = { id: number, login: string, name: string, role: 'admin'/'user', nbWins: number, nbLoses: number, isTwoFa : boolean, avatarUrl: string };
    - User_profile = { login: string, name: string, nbWins: number, nbLoses: number, isTwoFa: boolean, avatarUrl: string };
    - User_public = { login: string , name: string, nbWins: number, nbLoses: number, avatarUrl: string };
    - User_profile_setting = { login: name, name: string, isTwoFa: boolean, avatarUrl: string };

  Friends:

    - Friends_entity = { id: number, sender: string, receiver: string, status: 'none'/'pending'/'accepted' };
    - Friends_invite = { sender: string, receiver: string, status: 'none'/'pending'/'accepted' };

Authentification:

  - GET Address_backend + /auth/get_token : Query { code=accessToken }
          return login_success

  - GET Address_backend + /auth/refresh_token: header { Authorization: 'Bearer + apiToken'}
          return refresh_token

  - GET Address_backend + /twofa/get_token: Query { login=userLogin, code=TwofaCode }
          return login_success by checking twofa

Users:

  - GET Address_backend + /users
        return User_public[]

  - GET Address_backend + /users/admin : header { Authorization: 'Bearer + apiToken'}
          return User_entity[]

  - GET Address_backend + /users/profile/:login : header { Authorization: 'Bearer + apiToken'}
          :login is user login 
          return User_profile interface

  - GET Address_backend + /users/public/:login : header { Authorization: 'Bearer + apiToken'}
          :login is user login
          return User_public interface

  - POST Address_backend + /users/edit: header { Authorization: 'Bearer + apiToken'}, Body {User_profile_setting}
          edit profil parameter

  - POST Address_backend + /users/game : header { Authorization: 'Bearer + apiToken'}, Body { winnerLogin: string, loserLogin : string }
          update game score

  - POST Address_backend + /users/uploadAvatar : header { Authorization: 'Bearer + apiToken', }
          upload Avatar image to backend
  
  - DELETE Address_backend + /users/delete:
            delete all User_entity 

Friends:

  - GET Address_backend + /friends: header { Authorization: 'Bearer + apiToken'}
        return User_public[]
  
  - GET Address_backend + /friends/logins: header { Authorization: 'Bearer + apiToken'}
        return user login table
  
  - GET Address_backend + /friends/get_invite: header { Authorization: 'Bearer + apiToken'}
        return Friends_invite[] to invite
  
  - GET Address_backend + /friends/geet_receive: header { Authorization: 'Bearer + apiToken'}
        return Friends_invite[] to receiver 

  - GET Address_backend + /friends/admin: header { Authorization: 'Bearer + apiToken'}
          if user role is admin then return Friends_entity[]

  - POST Address_backend + /friends/send: header { Authorization: 'Bearer + apiToken'}, Query { to=userLogin }
          send invite to user
  
  - POST Address_backend + /friends/accept: header { Authorization: 'Bearer + apiToken'}, Query { to=userLogin }
          accept invite to user
  
  - POST Address_backend + /friends/deny: header { Authorization: 'Bearer + apiToken'}, Query { to=userLogin }
          deny invite to user
  
  -  DELETE Address_backend + /friends
              delete all Friends_entity
